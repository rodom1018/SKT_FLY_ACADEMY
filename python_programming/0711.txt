파이썬만 복소수 개념이 있음.

* 피연산자 중 하나라도 정수가 아닐 경우 --> 결과는 항상 실수 
정수 + 실수 -> 실수 + 실수 로 변환하여 (비교적) 복잡한 절차를 거침.

문자열은 양쪽을 큰 따옴표나 작은 따옴표로 감싸야함 ( 둘 다 가능하다!  ) 

실수 형태의 문자열은 정수로 반환 불가능
c = int('15') 가능
c = int('15.6') 불가능 

score = '85'
score + 5 불가능

(특이) -4**2 => -16 임

파이썬은 문자, 문자열 구분하지 않고 같은 것으로 취급한다. 


문자열에 작은따옴표(') 포함시키기 ➔ 문자열을 큰따옴표(")로 둘러싸야 함
문자열에 큰따옴표(") 포함시키기 ➔ 문자열을 작은따옴표(')로 둘러싸면 됨

긴 문자열은 \ 기호를 사용하여 여러 줄에 걸쳐 작성할 수 있다.


+ 연산
숫자 + 숫자 ➔ 덧셈연산
문자열 + 문자열 ➔ 문자열 연결
수자 + 문자열 ➔ 오류 (연산불가)
문자열 + 수자 ➔ 오류 (연산불가)

 * 연산
숫자 * 숫자 ➔ 곱셈연산
문자열 * 문자열 ➔ 오류 (연산불가)
숫자 * 문자열 ➔ 문자열 반복
문자열 * 숫자 ➔ 문자열 반복

(주의)
>>> age = input("Enter your age: ")
Enter your age: 22
>>> type(age)
<class 'str'> # str 임

(print 함수)
콤마( , )를 분리 기호로 여러 개를 함께 출력. 각 항목 사이에는 빈 칸
>>> print("number", 12, 13)
number 12 13

N = M.copy() # copy 는 깊은 복사를 해주는 메서드임 


메소드 함수 vs 내장함수
메소드 함수 --> 땡땡.delete()
내장 함수 --> delete()

iteratble data ==>  문자열, 리스트 (1234 는 안됨 )


y = sorted(x)
x 리스트에는 값의 변화가 없음 . 

튜플 <- 리스트에 약간의 제약을 더함.  수정이 없다
set집합 <-  리스트에서  중복 x , 순서 없음 

>>> print("{0} is a son of {1}.".format('Simon', 'John'))
Simon is a son of John.
>>> print("{1} is a son of {0}.".format('Simon', 'John'))
John is a son of Simon.

“{순서 : 출력형식}”
.format(var)
◆ { }안에 기호 : 을 사용해서 위치와 출력 형식을 지정할 수 있다
◆순서와 출력형식 모두 생략 가능

>>> print(msg[:-4]) # msg[0:2]
Py

a=[1,2,3,4,5,6]
a[1:2] = [5,6]
print(a)
[1, 5, 6, 3, 4, 5, 6]
